<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ux_client_script">
    <sys_ux_client_script action="INSERT_OR_UPDATE">
        <includes/>
        <macroponent display_value="Home Stylized">c58628648721ad1089790fe5dabb3528</macroponent>
        <name>Photobooth Loaded</name>
        <preset/>
        <required_translations>[ ]</required_translations>
        <script><![CDATA[/**
 * @param {params} params
 * @param {api} params.api
 * @param {any} params.event
 * @param {any} params.imports
 * @param {ApiHelpers} params.helpers
 */
function handler({
    api: {
        setState,
        data,
        state
    },
    event,
    helpers,
    imports
}) {
    console.log("PHOTOBOOTH LOADED!")
    const pb = data.look_up_photobooths.results[0];

    // Treat these as special cases as the sysId isn't in the regular
    // list of fields and the device id needs to be put into an array
    setState("sysId", pb._row_data.uniqueValue);
    setState("selectedCameraDeviceId", [pb.camera_device_id.value]);

    // Map the rest based on camel and snake case, e.g. "longName == long_name"
    mapFromDbToState(pb, state, setState);

    data.look_up_request.refresh();

    function mapFromDbToState(row, state, setState) {
        const dbFieldNames = Object.keys(row).filter(k => !k.startsWith("_"));

        dbFieldNames.forEach(dbFieldName => {
            const stateFieldName = toCamelCase(dbFieldName);
            if (state[stateFieldName] !== undefined) {
                setState(stateFieldName, row[dbFieldName].value);
                console.log(`*** ${stateFieldName} -> ${row[dbFieldName].value}`);
            }
        });

        function toCamelCase(str) {
            return str.replace(/_([a-z])/g, (matchedLetter) => matchedLetter[1].toUpperCase());
        }
    }

}]]></script>
        <script_api_version>2.0.0</script_api_version>
        <sys_class_name>sys_ux_client_script</sys_class_name>
        <sys_created_by>jon.lind</sys_created_by>
        <sys_created_on>2023-03-28 18:00:16</sys_created_on>
        <sys_id>f4406a6647b12d10552caf52736d43ef</sys_id>
        <sys_mod_count>23</sys_mod_count>
        <sys_name>Photobooth Loaded</sys_name>
        <sys_package display_value="Photobooth App" source="x_snc_pb_app">baa73cb74742dd10552caf52736d43f1</sys_package>
        <sys_policy/>
        <sys_scope display_value="Photobooth App">baa73cb74742dd10552caf52736d43f1</sys_scope>
        <sys_update_name>sys_ux_client_script_f4406a6647b12d10552caf52736d43ef</sys_update_name>
        <sys_updated_by>jon.lind</sys_updated_by>
        <sys_updated_on>2023-04-07 18:59:26</sys_updated_on>
        <target>macroponent</target>
        <type>default</type>
    </sys_ux_client_script>
</record_update>
