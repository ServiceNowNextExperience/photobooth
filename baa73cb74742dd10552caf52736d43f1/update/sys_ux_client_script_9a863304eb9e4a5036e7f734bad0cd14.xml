<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ux_client_script">
    <sys_ux_client_script action="INSERT_OR_UPDATE">
        <controller_preset/>
        <includes>ac98005d87c6a51089790fe5dabb35bd</includes>
        <macroponent display_value="Home Stylized copy">ca863304eb9e4a5036e7f734bad0cd0f</macroponent>
        <name>Setting Updated</name>
        <preset/>
        <required_translations>[
    
]</required_translations>
        <script><![CDATA[/**
 * @param {params} params
 * @param {api} params.api
 * @param {any} params.event
 * @param {any} params.imports
 * @param {ApiHelpers} params.helpers
 */
function handler({
    api: {
        state,
        data,
        setState
    },
    event: {
        elementId,
        payload
    }
}) {
    console.log("SETTINGS CHANGED!", state, {
        elementId,
        payload
    });

    // Keep track of the number of settings changes. If the new value is different from the db
    // the increment it.  If it's the same, decrement the count.
    var changedSettings = state.changedSettings.filter(e => e !== elementId);

    // The name (elementId) of the form elements are the same as
    // the client state parameters.  They also match the database
    // field names but in snake case, e.g. chinHeight == chin_height

    // Check to see if this elementId has a payload and a matching state variable
    if(state[elementId] !== undefined && (payload.fieldValue !== undefined || payload.value !== undefined)){
        // FieldValue is used by text fields, value by drop downs. Check undefined instead of
        // falsey to account for empty string
        const payloadValue = payload.fieldValue !== undefined ? payload.fieldValue : payload.value;

        setState(elementId, payloadValue);

        const dbFieldName = toSnakeCase(elementId);

        const pb = data.look_up_photobooths.results[0];

        if(pb[dbFieldName] !== undefined){
            const dbValue = pb[dbFieldName].value;
            if (dbValue != payloadValue) {
                changedSettings.push(elementId);
            }
        } 
    }

    // Run the changedSettings and saveDisabled logic every time, even if the state or db value doesn't
    // exist, so that you can use this method to update saveDisabled on any event.
    setState("changedSettings", changedSettings);
    setState("saveDisabled", (changedSettings.length === 0));

    function toSnakeCase(str) {
        return str.replace(/[A-Z]/g, (letter) => `_${letter.toLowerCase()}`);
    }
}]]></script>
        <script_api_version>2.0.0</script_api_version>
        <sys_class_name>sys_ux_client_script</sys_class_name>
        <sys_created_by>jon.lind</sys_created_by>
        <sys_created_on>2024-05-16 18:46:06</sys_created_on>
        <sys_id>9a863304eb9e4a5036e7f734bad0cd14</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>Setting Updated</sys_name>
        <sys_package display_value="Photobooth App" source="x_snc_pb_app">baa73cb74742dd10552caf52736d43f1</sys_package>
        <sys_policy/>
        <sys_scope display_value="Photobooth App">baa73cb74742dd10552caf52736d43f1</sys_scope>
        <sys_update_name>sys_ux_client_script_9a863304eb9e4a5036e7f734bad0cd14</sys_update_name>
        <sys_updated_by>jon.lind</sys_updated_by>
        <sys_updated_on>2024-05-16 18:46:06</sys_updated_on>
        <target>macroponent</target>
        <type>default</type>
    </sys_ux_client_script>
</record_update>
